# Requirements for Python Account Management System

## System Requirements

### Python Version
- **Minimum**: Python 3.7
- **Recommended**: Python 3.9 or higher
- **Tested with**: Python 3.9, 3.10, 3.11

### Dependencies
This project uses only Python standard library modules, no external dependencies required:

- `json` - For data persistence
- `os` - For file operations
- `decimal` - For precise financial calculations
- `typing` - For type hints
- `unittest` - For testing framework
- `tempfile` - For test file management
- `unittest.mock` - For test mocking
- `io` - For I/O operations in tests

### System Compatibility
- **Operating Systems**: Windows, macOS, Linux
- **Architecture**: x86, x64, ARM
- **Memory**: Minimum 50MB available RAM
- **Storage**: Minimum 10MB available disk space

## Installation

### Quick Start
```bash
# Clone or download the project files
cd legacy-app-python

# Verify Python installation
python --version

# Run the application
python main.py

# Run tests
python test_account_system.py
```

### File Structure
```
legacy-app-python/
├── main.py                    # Main application entry point
├── operations.py              # Account operations module
├── data_manager.py           # Data persistence module
├── test_account_system.py    # Test suite
├── README.md                 # Project documentation
├── TESTING.md               # Testing documentation
├── requirements.txt         # This file
└── account_data.json        # Created automatically for data storage
```

## Development Requirements

### For Contributors
If you plan to contribute to this project, you may want to install:

```bash
# Optional development tools (not required for basic usage)
pip install pylint        # Code linting
pip install mypy          # Type checking
pip install black         # Code formatting
pip install coverage      # Test coverage analysis
```

### Code Quality Standards
- **Style Guide**: PEP 8 compliance
- **Type Hints**: Full type annotation coverage
- **Documentation**: Comprehensive docstrings
- **Testing**: Minimum 95% test coverage

## Runtime Environment

### Data Files
- **account_data.json**: Automatically created for data persistence
- **Permissions**: Read/write access to application directory
- **Backup**: Manual backup recommended for important data

### Performance Characteristics
- **Startup Time**: < 100ms
- **Memory Usage**: < 10MB during normal operation
- **Response Time**: < 10ms for typical operations
- **File I/O**: Minimal, only on balance changes

## Deployment Considerations

### Production Deployment
For production use, consider:

1. **File Permissions**: Ensure proper read/write permissions
2. **Data Backup**: Regular backup of account_data.json
3. **Logging**: Implement logging for audit trails
4. **Security**: Consider file encryption for sensitive data
5. **Monitoring**: Monitor application health and performance

### Multi-User Considerations
Current implementation is single-user. For multi-user deployment:

1. **Database**: Replace JSON with proper database
2. **Concurrency**: Implement proper locking mechanisms
3. **Authentication**: Add user authentication system
4. **Authorization**: Implement access control
5. **Session Management**: Add session handling

## Migration from COBOL

### COBOL Compiler Requirements (for comparison testing)
If testing against original COBOL version:

```bash
# macOS
brew install gnucobol

# Ubuntu/Debian
sudo apt-get install gnucobol

# Compile original COBOL
cobc -x main.cob operations.cob data.cob -o accountsystem
```

### Data Migration
The Python version starts with the same default balance (1000.00) as the COBOL version. No data migration is required for new installations.

## Troubleshooting

### Common Issues

#### Permission Errors
```bash
# If you get permission errors:
chmod 755 .                    # Directory permissions
chmod 644 *.py                 # File permissions
```

#### Python Version Issues
```bash
# Check Python version
python --version

# If using Python 3.x specifically
python3 main.py
python3 test_account_system.py
```

#### File Not Found Errors
The application automatically creates required data files. If you encounter issues:

1. Ensure write permissions in the application directory
2. Check available disk space
3. Verify the application directory is not read-only

### Support
For issues or questions:

1. Check the README.md for usage instructions
2. Review TESTING.md for testing procedures
3. Examine error messages for specific guidance
4. Verify system requirements are met

## Version History

### v1.0.0 (Current)
- Initial release
- Complete COBOL functionality migration
- Comprehensive test suite
- Full documentation

### Future Versions
Planned enhancements may include:
- Database integration
- Web interface
- Multi-user support
- Enhanced security features
- API development

## License and Legal

### License
This project inherits the license from the original COBOL project.

### Third-Party Components
This project uses only Python standard library components, no third-party licenses apply.

### Data Privacy
The application stores financial data locally. Users are responsible for:
- Securing data files appropriately
- Complying with relevant data protection regulations
- Implementing appropriate access controls for their environment
